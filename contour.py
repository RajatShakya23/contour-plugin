# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Contour
                                 A QGIS plugin
 This plugin creates a line feature class of contours from a raster surface
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-12-30
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Rajat Shakya
        email                : rajat.181cv232@nitk.edu.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .contour_dialog import ContourDialog
import os.path

# User made starts here
# For setting layers in Dialog box
from qgis.core import QgsProject, QgsPointXY
from osgeo import gdal
from .Code import *

import numpy

from qgis.utils import iface

#For Vector Layer Creation
from qgis.PyQt.QtCore import QVariant
from osgeo import ogr, osr
import tempfile


###################################################################

class Contour:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Contour_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Contour')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Contour', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/contour/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Create contour lines'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Contour'),
                action)
            self.iface.removeToolBarIcon(action)


    #---------------------------------- Update methods for signals ----------------------------------
    def update_sls(self):
        """Enable/Disable the option to specify output layer name."""
        # When only one layer is selected
        if self.dlg.source_layer_select.checkedItems().__len__()==1:
            # Enable setting output layer name
            self.dlg.dst_layer_name.setEnabled(True)
            # Set Default output layer name
            source_layer_name = self.dlg.source_layer_select.currentText()
            self.dlg.dst_layer_name.setPlaceholderText(source_layer_name + ' contour')

        # When multiple layers are selected
        else:
            # Clear Default output layer name
            self.dlg.dst_layer_name.setPlaceholderText('')
            # Disable setting output layer name
            self.dlg.dst_layer_name.setEnabled(False)
        return


    def update_lpf(self):
        """Enable/Disable Low pass filter parameters."""
        self.dlg.lpf_search_mode.setEnabled(self.dlg.low_pass_filter.isChecked())
        return


    def update_merge(self):
        """Enable/Disable the option to specify merged output layer name."""
        self.dlg.merge_layer_name.setEnabled(self.dlg.merge.isChecked())
        return

    # ------------------------------------------- Run Plugin -------------------------------------------
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start is True:
            self.first_start = False
            self.dlg = ContourDialog()


        # --------------------- Initialize Elements of dialog box before showing it ---------------------

        # --------------------- "Select existing layer" comboBox ---------------------
        # Fetch the currently loaded raster layers
        layers = QgsProject.instance().layerTreeRoot().children()
        raster_layers = []
        for layer in layers:
            if layer.layer().type() != QgsMapLayer.VectorLayer:
                raster_layers.append(layer)

        # Clear the contents of the comboBox from previous runs
        self.dlg.source_layer_select.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.source_layer_select.addItems([layer.name() for layer in raster_layers])

        # ------------------------ "Choose from file" option ------------------------
        # Set storage mode to "Multiple Files"
        self.dlg.source_layer_choose.setStorageMode(2)

        # --------------------- "Contour Layer Directory" option ---------------------
        # Set storage mode to "Directory"
        self.dlg.dst_layer_dir.setStorageMode(1)
        # Set path definition as "Relative to the current project path"
        self.dlg.dst_layer_dir.setRelativeStorage(1)

        # Default directory
        default_filepath = "./QGIS Contours Temp"   # Path relative to the QGIS directory
        # Create default dir in the first run
        if not os.path.exists(default_filepath):
            os.mkdir(default_filepath)
        #Set default dir path
        self.dlg.dst_layer_dir.setFilePath(os.path.abspath(default_filepath))

        # ------------------------- "Low pass filter" option -------------------------
        # Clear the contents of the comboBox from previous runs
        self.dlg.lpf_search_mode.clear()
        # Populate comboBox
        self.dlg.lpf_search_mode.addItems(['Square', 'Circle'])




        # --------------------------------------- Show the dialog ---------------------------------------
        self.dlg.show()

        # ------------------------------------------- Signals -------------------------------------------
        self.dlg.low_pass_filter.toggled.connect(self.update_lpf)
        self.dlg.source_layer_select.checkedItemsChanged.connect(self.update_sls)
        self.dlg.merge.toggled.connect(self.update_merge)


        result = self.dlg.exec_()

        # Run the dialog event loop
        # See if OK was pressed
        if result:
            # Create Temporary Directory
            temp_dir = tempfile.mkdtemp()


            # Standardize Common Input Parameters
            ip_param = {
                "bc": self.dlg.base_contour.value(),
                "ci": self.dlg.contour_interval.value(),
                "dst_dir": self.dlg.dst_layer_dir.filePath(),
                "indx": self.dlg.index_contour.isChecked(),
                "lpf": self.dlg.low_pass_filter.isChecked(),
                "lpfr": 0,
                "lpfsm": 0,
                "zF": self.dlg.zfactor.isChecked(),
                "zFval": 1,
                "ignd": self.dlg.ignore_nodata.isChecked(),
                "td": temp_dir
            }

            if ip_param["lpf"] is True:
                ip_param["lpfr"] = self.dlg.lpf_radius.value()
                ip_param["lpfsm"] = self.dlg.lpf_search_mode.currentText()

            if ip_param["zF"] is True:
                ip_param["zFval"] = self.dlg.z_val.value()


            # Standardize Layer Specific Input Parameters
            if self.dlg.dst_layer_name.isEnabled():
                dst_layer_name = self.dlg.dst_layer_name.text()
            else:
                dst_layer_name = ''

            process_list = []

            # If user selects already loaded layer.
            if self.dlg.radio_existing.isChecked():
                source_layer_name_list = self.dlg.source_layer_select.checkedItems()           # Obtain input layer name list

                # Condition for merge multiple existing layers
                if self.dlg.merge.isChecked() is True and len(source_layer_name_list) > 1:
                    source_layer_filepath_list = merge(source_layer_name_list, temp_dir)
                    source_layer_name = extractSourceLayerName(source_layer_filepath_list[0])
                    dst_layer_name = self.dlg.merge_layer_name.text()                          # Set destination layer name as provided by user
                    process_list.append(Process(ip_param, source_layer_filepath_list[0],
                                                source_layer_name, dst_layer_name))            # Begin Processing

                # Condition for non-merge multiple existing layers
                else:
                    for source_layer_name in source_layer_name_list:
                        SetLayer = QgsProject.instance().mapLayersByName(source_layer_name)    # Get List of Layers with source layer name
                        req_layer = SetLayer[0]                                                # Get the required layer from the above layer list.
                        source_layer_filepath = req_layer.dataProvider().dataSourceUri()       # Get Filepath of required layer
                        process_list.append(Process(ip_param, source_layer_filepath,
                                                    source_layer_name, dst_layer_name))        # Begin Processing


            # If user selects file layer from dialog box
            else:
                source_layer_filepath_list = self.dlg.source_layer_choose.splitFilePaths(self.dlg.source_layer_choose.filePath())

                # Condition for merge multiple files
                if self.dlg.merge.isChecked() is True and len(source_layer_filepath_list) > 1:
                    source_layer_filepath_list = merge(source_layer_filepath_list, temp_dir)
                    dst_layer_name = self.dlg.merge_layer_name.text()

                for source_layer_filepath in source_layer_filepath_list:
                    source_layer_name = extractSourceLayerName(source_layer_filepath)
                    process_list.append(Process(ip_param, source_layer_filepath,
                                                source_layer_name, dst_layer_name))             # Begin Processing


            deleteDirectory(temp_dir)
            return